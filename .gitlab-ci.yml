stages:
  - acheckerTest
  - a11yTest
#  - AXEtest
#  - htmlcsTests
# - LHtest

# for pa11y: https://opensource.com/article/23/2/automated-accessibility-testing

include:
  - template: "Verify/Accessibility.gitlab-ci.yml"
#  - '.achecker.yml
  # - 'docker-compose.yml'

variables:
  URL: "http://localhost:1338"
  APP: "http://localhost:1338"
  a11ys_urls: "https://idasm-unibe-ch.github.io/unibe-web-accessibility/operable https://idasm-unibe-ch.github.io/unibe-web-accessibility/percievable https://idasm-unibe-ch.github.io/unibe-web-accessibility/understandable"
  a11y_urls: " http://localhost:1338/percievable  http://localhost:1338/operable  http://localhost:1338/understandable"

#htmlcs:
# #  image: node:18
# stage: htmlcsTest
# before_script:
#   - npm ci
#   - npm run build --if-present
#   - npm start & npx wait-on $APP
# script:
#   - npm i --save html_codesniffer
#   - cd node_modules/html_codesniffer
#   - npm install
#   - cd ../..
#   - npm i puppeteer # the js file has it set so puppeteer has no sandbox on launch
#   - cp html_cs.js node_modules/html_codesniffer/HTMLCS.js
#   - node node_modules/html_codesniffer/HTMLCS.js $APP
# only:
#   - master

# lighthouse:
#  image: node:18
#  stage: LHtest
#  before_script:
#     - apt-get update && apt-get install -y chromium libnss3 libxss1 libatk-bridge2.0-0 libgtk-3-0 libasound2
#     - chromium --version
#  script:
#     - npm ci
#     - mkdir -p results/lighthouse/
#     - npm run build --if-present
#     - npm start & npx wait-on $APP
#     - curl -I http://localhost:1338 || echo "App not responding"
#     - npx lhci autorun  # testing without docker because of the "priviledge mode" errors
#     # something to archive artifacts or just handle it through link?
#  only:
#     - master
  # artifacts:
  #  paths:
  #    - results/lighthouse/

# A11Y WORKS JUST FINE IF THE WEBSITE IS HOSTED !!!!
a11y:
  stage: a11yTest
  image: "$CI_TEMPLATE_REGISTRY_HOST/gitlab-org/ci-cd/accessibility:6.2.3"
  script:
    - npm ci
    - npm run build --if-present
    - npm start & npx wait-on $APP
    - /gitlab-accessibility.sh "$a11y_urls"
  allow_failure: true
  artifacts:
    when: always
    expose_as: 'Accessibility Reports'
    paths: ['reports/']
    reports:
       accessibility: reports/gl-accessibility.json
  rules:
    - if: $a11y_urls

achecker:
   stage: acheckerTest
   image: node:18
   before_script:
    - npm install --save-dev accessibility-checker

    - apt-get update
    - apt-get install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2
      libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libgconf-2-4
      libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0
      libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1
      libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1
      libxss1 libxtst6 ca-certificates fonts-liberation libnss3 lsb-release
      xdg-utils wget
    - npm ci
    - npm run build --if-present
    - npm start & npx wait-on $APP
    - curl -I http://localhost:1338 || echo "App not responding"
   script:
    - npm install accessibility-checker
    - npx achecker --no-sandbox --ruleArchive latest --policies WCAG_2_1 --failLevels violation --reportLevels violation,potentialviolation --outputFormat json --outputFolder results/achecker "$a11y_urls"
   allow_failure: true
# # the above line worked on commnd line, so why not now ?
# # these are already clarified in the achecker.yml for the most part....
