stages:
  - server
  - LHtest
  - acheckerTest
  - a11yTest
#  - AXEtest
#  - htmlcsTests
# - LHtest

# for pa11y: https://opensource.com/article/23/2/automated-accessibility-testing

include:
  - template: "Verify/Accessibility.gitlab-ci.yml"
#  - '.achecker.yml
  # - 'docker-compose.yml'
version: "3.8"
networks:
  testnet:
services:
  server:
    image: node:18
    container_name: "server"
    ports:
      - "1338:1338"
    volumes:
      - ".:/server"
    working_dir: /server
    command: bash -c "npm install && npm run start"
    networks:
      - testnet
    restart: "always"

variables:
  URL: "http://localhost:1338"
  APP: "http://localhost:1338"
  a11y_urls: "https://idasm-unibe-ch.github.io/unibe-web-accessibility/operable https://idasm-unibe-ch.github.io/unibe-web-accessibility/percievable https://idasm-unibe-ch.github.io/unibe-web-accessibility/understandable"

#htmlcs:
# #  image: node:18
# stage: htmlcsTest
# before_script:
#   - npm ci
#   - npm run build --if-present
#   - npm start & npx wait-on $APP
# script:
#   - npm i --save html_codesniffer
#   - cd node_modules/html_codesniffer
#   - npm install
#   - cd ../..
#   - npm i puppeteer # the js file has it set so puppeteer has no sandbox on launch
#   - cp html_cs.js node_modules/html_codesniffer/HTMLCS.js
#   - node node_modules/html_codesniffer/HTMLCS.js $APP
# only:
#   - master


# needing a build stage for download of chrome / reducing time for npm and other installations ?
# archiving?
# see commented code at end of file
# reducing dependencies for lighthouse since it wasnt all needed, just precautionary testing ..v
# wget curl ca-certificates fonts-liberation libappindicator3-1 libasound2 libatk-bridge2.0-0 libatk1.0-0 libcups2 libdbus-1-3 libgdk-pixbuf2.0-0 libnspr4 libnss3 libx11-xcb1 libxcomposite1 libxdamage1 libxrandr2 xdg-utils libu2f-udev
lighthouse:
 image: node:18
 stage: LHtest
 before_script:
    - apt-get update && apt-get install -y chromium libnss3 libxss1 libatk-bridge2.0-0 libgtk-3-0 libasound2
    - chromium --version
 script:
    - npm ci
    - mkdir -p results/lighthouse/
    - npm run build --if-present
    - npm start & npx wait-on $APP
    - docker compose up
    - curl -I http://localhost:1338 || echo "App not responding"
    - npx lhci autorun  # testing without docker because of the "priviledge mode" errors
    # something to archive artifacts or just handle it through link?
 only:
    - master
  # artifacts:
  #  paths:
  #    - results/lighthouse/

# trying to add pa11y
# in bash: npm i --save-dev pa11y-ci

# A11Y WORKS JUST FINE IF THE WEBSITE IS HOSTED !!!!
a11y:
  stage: a11yTest
  image: "$CI_TEMPLATE_REGISTRY_HOST/gitlab-org/ci-cd/accessibility:6.2.3"
  script:
    - npm ci
    - npm run build --if-present
    - npm start & npx wait-on $APP
    - /gitlab-accessibility.sh "$a11y_urls"
  allow_failure: true
  artifacts:
    when: always
    expose_as: 'Accessibility Reports'
    paths: ['reports/']
    reports:
       accessibility: reports/gl-accessibility.json
  rules:
    - if: $a11y_urls

achecker:
   stage: acheckerTest
   image: node:18
   before_script:
    - apt-get update && apt-get install -y chromium libnss3 libxss1 libatk-bridge2.0-0 libgtk-3-0 libasound2
    - chromium --version
    - npm ci
    - npm run build --if-present
    - npm start & npx wait-on $APP
   script:
    - npm install accessibility-checker
    - npx achecker --no-sandbox --ruleArchive latest --policies WCAG_2_1 --failLevels violation --reportLevels violation,potentialviolation --outputFormat json --outputFolder results/achecker "$a11y_urls"
# # the above line worked on commnd line, so why not now ?
# # these are already clarified in the achecker.yml for the most part....













# trying axe in a different way
# https://blog.jameswinfield.co.uk/checking-accessibility-on-your-ci-pipeline-with-axe-core-cli/
# the yaml also uses ubuntu rather https://www.nerds-life.com/t/how-to-get-google-chrome-on-ubuntu-24-04/1384

# even in all different types of chrome installations... the issue is session errors.. it could be something with 
# proper priviledges or something. idk.
# axe:
#  image: node:18  # github had use node 18, same as lighthouse
#  stage:  AXEtest
#  parallel:
##    matrix:
#      - webpage: "perceivable"
##    #  - webpage: "operable"
#    #  - webpage: "understandable"
#  variables:
#    name: Axe-core-$webpage  # idk if this is necessary still here or if its just artifacts
##    path: results/axe/axe-results-$webpage.json
#    APP: http://localhost:1338
#  before_script:
#    - apt-get update && apt-get install -y curl unzip xvfb libxi6 libgconf-2-4
#    - curl -sSL https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -o chrome.deb
#    - apt install -y ./chrome.deb
#    - npm ci
#    - npm run build --if-present
##    - npm start & npx wait-on $APP
#    - npm install -g browser-driver-manager
#    - npx browser-driver-manager install chrome
#    - npm install -g @axe-core/cli
#  script:
    # it needs to be export i think, so that axe --chromedriver..etc below can use it
    # which chromedriver needs to change too because of the browser-driver-manager ?
    #- export CHROME_PATH=$(npx browser-driver-manager which chrome)
#    - echo "npx manager path $(npx browser-driver-manager which chrome)"
#    - export CHROME_PATH="/root/.browser-driver-manager/chrome/linux-136.0.7103.113/chrome-linux64/chrome"
#    - export CHROMEDRIVER_PATH="/root/.browser-driver-manager/chromedriver/linux-136.0.7103.113/chromedriver-linux64/chromedriver"
#    - mkdir -p results/axe
#    - axe --chromedriver-path $CHROMEDRIVER_PATH --chrome-options "disable-dev-shm-usage --user-data-dir=/tmp/chrome-user-data-dir-$(date +%s)" $APP/$webpage --dir ./results/axe/ --save axe-results-$webpage.json
#  artifacts:
#    name: Axe-core-$webpage

  # chrome options only looking for it directly?
  # https://github.com/dequelabs/axe-core-npm/blob/develop/packages/cli/README.md

# https://github.com/GoogleChrome/chrome-launcher/blob/main/docs/chrome-flags-for-tools.md
# ref : https://gitlab.com/gitlab-ci-utils/lighthouse
# ref for custom runner + lhci https://medium.com/1mgofficial/integrating-lighthouse-ci-in-your-gitlab-ci-cd-pipeline-1233b9223e5c

#stages:
#  - build
#  - test
#  - archive

# needing setup
#before_script:
# - apt-get update && apt-get install -y curl wget bash unzip
#  - npm ci
#  - npm run build --if-present  # currently not

#https://www.jenkins.io/doc/book/pipeline/docker/
#https://hub.docker.com/r/cypress/browsers/
#build:
#  stage: build
  # node:20 for more consistency instead ?
  # node:20 is better but its still missing chrome in container
  # build can just be with node:20 its faster?
  # image: cypress/browsers:node-20.14.0-chrome-125.0.6422.141-1-ff-126.0.1-edge-125.0.2535.85-1
#  image: node:20
#  script:
#    - echo "Build completed"
#  artifacts:
#    paths:
#      - ./