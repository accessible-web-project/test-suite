stages:
  - LHtest
  - AXEtest

# for pa11y: https://opensource.com/article/23/2/automated-accessibility-testing

variables:
  APP: "http://localhost:1338"

# needing a build stage for download of chrome / reducing time for npm and other installations ?
# archiving?
# see commented code at end of file
# reducing dependencies for lighthouse since it wasnt all needed, just precautionary testing ..v
# wget curl ca-certificates fonts-liberation libappindicator3-1 libasound2 libatk-bridge2.0-0 libatk1.0-0 libcups2 libdbus-1-3 libgdk-pixbuf2.0-0 libnspr4 libnss3 libx11-xcb1 libxcomposite1 libxdamage1 libxrandr2 xdg-utils libu2f-udev
lighthouse:
  image: node:18
  stage: LHtest
  before_script:
    - apt-get update && apt-get install -y chromium libnss3 libxss1 libatk-bridge2.0-0 libgtk-3-0 libasound2
    - chromium --version
  script:
    - npm ci
  #   - mkdir -p results/lighthouse/
    - curl -I http://localhost:1338 || echo "App not responding"
    - npx lhci autorun  # testing without docker because of the "priviledge mode" errors
    # something to archive artifacts or just handle it through link?
  only:
    - master
  # artifacts:
    # paths:
      # - results/lighthouse/

# trying axe in a different way
# https://blog.jameswinfield.co.uk/checking-accessibility-on-your-ci-pipeline-with-axe-core-cli/
# the yaml also uses ubuntu rather https://www.nerds-life.com/t/how-to-get-google-chrome-on-ubuntu-24-04/1384
axe:
  image: node:18  # github had use node 18, same as lighthouse
  stage:  AXEtest
  parallel:
    matrix:
      - webpage: "perceivable"
      - webpage: "operable"
      - webpage: "understandable"
  variables:
    name: Axe-core-$webpage  # idk if this is necessary still here or if its just artifacts
    path: results/axe/axe-results-$webpage.json
    APP: http://localhost:1338
  before_script:
    - apt-get update && apt-get install -y curl unzip xvfb libxi6 libgconf-2-4
    - curl -sSL https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -o chrome.deb
    - apt install -y ./chrome.deb
    - npm ci
    - npm run build --if-present
    - npm start & npx wait-on $APP
    - npm install -g chromedriver@124
    - npm install -g @axe-core/cli
  script:
    # it needs to be export i think, so that axe --chromedriver..etc below can use it
    - export CHROMEDRIVER_PATH=$(which chromedriver)
    - mkdir -p results/axe
    - xvfb-run axe --chromedriver-path $CHROMEDRIVER_PATH $APP/$webpage --dir ./results/axe/ --save axe-results-$webpage.json
  artifacts:
    name: Axe-core-$webpage

  # "Xvfb(1x) command which simplifies the task of running commands (typically an X client,
  # or a script containing a list of clients to be run) within a virtual X server environment.""


# https://github.com/GoogleChrome/chrome-launcher/blob/main/docs/chrome-flags-for-tools.md
# ref : https://gitlab.com/gitlab-ci-utils/lighthouse
# ref for custom runner + lhci https://medium.com/1mgofficial/integrating-lighthouse-ci-in-your-gitlab-ci-cd-pipeline-1233b9223e5c

#stages:
#  - build
#  - test
#  - archive


# needing setup
#before_script:
# - apt-get update && apt-get install -y curl wget bash unzip
#  - npm ci
#  - npm run build --if-present  # currently not

#https://www.jenkins.io/doc/book/pipeline/docker/
#https://hub.docker.com/r/cypress/browsers/
#build:
#  stage: build
  # node:20 for more consistency instead ?
  # node:20 is better but its still missing chrome in container
  # build can just be with node:20 its faster?
  # image: cypress/browsers:node-20.14.0-chrome-125.0.6422.141-1-ff-126.0.1-edge-125.0.2535.85-1
#  image: node:20
#  script:
#    - echo "Build completed"
#  artifacts:
#    paths:
#      - ./