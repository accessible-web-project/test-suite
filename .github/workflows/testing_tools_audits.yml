name: Web Accessibility Testing Tools Results
# This workflow runs Accessibility-checker, Axe, and HTML_Codesniffer 
# on all web pages of our test website and saves the results as github artifacts.

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Url for the running web app
  APP: http://localhost:1338

# issues with chromedrivers mixmatch: https://github.com/browser-actions/setup-chrome
jobs:
  axe:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        webpage: [perceivable, operable, understandable]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - name: Chrome browser-action
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: 124
          install-chromedriver: true
          install-dependencies: true
      - run: npm ci
      - run: npm run build --if-present
      - run: npm start & npx wait-on $APP
      - name: Debug running Chrome
        run: |
          echo "running chrome here: "
          ps aux | grep -i chrome || true
          chromedriver --version
          chrome --version
          echo "Chromedriver path: ${{ steps.setup-chrome.outputs.chromedriver-path }}"
      - name: Run axe-core
        run: |
          npm install -g @axe-core/cli
          CHROMEDRIVER_PATH="${{ steps.setup-chrome.outputs.chromedriver-path }}"
          echo "$CHROMEDRIVER_PATH"
          axe --chromedriver-path="$CHROMEDRIVER_PATH" --chrome-options='["--user-data-dir=/tmp/session-'"$(date +%s)"'", "--no-sandbox", "--disable-dev-shm-usage", "--headless=new"]' $APP/${{ matrix.webpage }} --dir ./results/axe/ --save axe-results-${{ matrix.webpage }}.json
      - name: Archive axe-core test results
        uses: actions/upload-artifact@v4
        with:
          name: Axe-core-${{ matrix.webpage }}
          path: results/axe/axe-results-${{ matrix.webpage }}.json

  achecker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - run: npm ci
      - run: npm run build --if-present
      - run: npm start & npx wait-on $APP
      - name: Run accessibility-checker
        run: |
          npm install accessibility-checker
          bash test.bash run achecker $APP
      - name: Archive accessibility-checker test results
        # if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: Accessibility-checker
          path: results/achecker/*

  htmlcs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - run: npm ci
      - run: npm run build --if-present
      - run: npm start & npx wait-on $APP
      - name: Run HTML_CodeSniffer
        run: |
          npm i --save html_codesniffer
          cd node_modules/html_codesniffer
          npm install
          cd ../..
          npm i puppeteer
          bash test.bash run htmlcs $APP
      - name: Archive HTML_CodeSniffer test results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: HTML_CodeSniffer
          path: results/HTML_CodeSniffer/*

  wave:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install curl and jq
        run: sudo apt-get install -y curl jq
      - name: Run WAVE API on All Pages
        env:
          APP: https://robinkxl.github.io/thesis-project
          WAVE_API_KEY: ${{ secrets.WAVE_API_KEY }}
        run: |
          mkdir -p results/wave
          PAGES=("perceivable" "operable" "understandable")
          for PAGE in "${PAGES[@]}"; do
            echo "Scanning $APP/$PAGE"
            curl -s "https://wave.webaim.org/api/request?key=$WAVE_API_KEY&reporttype=4&url=$APP/$PAGE" \
              -o "results/wave/wave-${PAGE}.json"
          done
      - name: Archive WAVE API results
        uses: actions/upload-artifact@v4
        with:
          name: WAVE-All
          path: results/wave/*.json

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - name: Install dependencies
        run: npm ci
      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
      - name: Run Lighthouse CI
        run: npx lhci autorun --config=./.lighthouserc.js
      - name: Archive Lighthouse CI results
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: Lighthouse
          path: results/Lighthouse/*  # Be specific about file extension
          if-no-files-found: warn
  
  pa11y:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - name: Chrome browser-action
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: 124
          install-chromedriver: true
          install-dependencies: true
      - run: npm ci
      - run: npm run build --if-present
      - run: npm start & npx wait-on $APP
      - name: Install pa11y-ci
        run: npm install -g pa11y-ci
      - name: Install pa11y reporter
        run: npm install -g pa11y-ci-reporter-html
      - name: Run pa11y-ci
        run: pa11y-ci  --reporter=pa11y-ci-reporter-html $APP